AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create an S3 bucket and a Lambda function"

Resources:
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-s3-bucket"

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyS3EventFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Received S3 event:', JSON.stringify(event, null, 2));
            return {
              statusCode: 200,
              body: JSON.stringify('Hello from Lambda!'),
            };
          };
      Runtime: nodejs20.x

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  S3BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt MyS3Bucket.Arn

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref MyS3Bucket
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt MyLambdaFunction.Arn
